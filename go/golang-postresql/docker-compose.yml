# version: '3.5'

### eklenecek onemli 
#https://articles.wesionary.team/dockerize-a-golang-applications-with-mysql-and-phpmyadmin-hot-reloading-included-86eb7a6cf8d5

# http://mysqltopgsql.com/post/unicode/   https://ahmetimamoglu.com.tr/postgresql-turkce-karakter-hatasinin-cozumleri
# https://towardsdatascience.com/how-to-run-postgresql-using-docker-15bf87b452d4
# https://levelup.gitconnected.com/creating-and-filling-a-postgres-db-with-docker-compose-e1607f6f882f   ıcınde create tanble ornegi var 

# https://firehydrant.com/blog/develop-a-go-app-with-docker-compose/


#https://www.callicoder.com/docker-golang-image-container-example/

#https://firehydrant.com/blog/develop-a-go-app-with-docker-compose/   buradan devam et 
# docker-compose up -d --build
# docker da terminali ac
# cd /data/postgres
# echo "host all all all $POSTGRES_HOST_AUTH_METHOD" >> pg_hba.conf
#pgadmine girilecek hostname adi localhost degil -> postgres_container olacak

#redis --https://hackernoon.com/how-to-configurate-redis-redis-commander-docker-616136f2
# apk update
# apk add nano
# redis-cli 
# CONFIG SET requirepass MDNcVb924a


services:
  golang:
    # platform: linux/amd64
    container_name: golang_container
    build:
      dockerfile: Dockerfile
      context: .
    volumes: ['golang:/golang']
    environment:
      API_SERVER_ADDR: ":3000"
      DATABASE_URL: postgres://local-dev@db/api?sslmode=disable
      VIRTUAL_HOST: app.example.com
    ports:
    - "3000:3000"
    # links:
    # - postgres
    # restart: always





  migrate: &basemigrate
    profiles: ["tools"]
    image: migrate/migrate
    entrypoint: "migrate -database postgresql://local-dev@db/api?sslmode=disable -path /tmp/migrations"
    command: up
    links:
      - postgres
    volumes:
      - ./migrations:/tmp/migrations

  create-migration:
    <<: *basemigrate
    entrypoint: migrate create -dir /tmp/migrations -ext sql
    command: ""


  postgres:
    container_name: postgres_container
    image: postgres:14.1
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
      POSTGRES_INITDB_ARGS: '--encoding=UTF-8 --lc-collate=C --lc-ctype=C'
      POSTGRES_HOST_AUTH_METHOD: "trust"
      PGDATA: /data/postgres
    volumes:
       - postgres:/data/postgres
    ports:
      - "5432:5432"
    networks:
      - backend
    restart: unless-stopped
    # command: ash -c "./scripts/pq-host.sh" 



  pgadmin:
    container_name: pgadmin_container
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-pgadmin4@pgadmin.org}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      
    volumes:
       - pgadmin:/var/lib/pgadmin
    ports:
      - "${PGADMIN_PORT:-5050}:80"
    networks:
      - backend
    restart: unless-stopped






  redis:
    container_name: redis
    hostname: redis
    image: arm64v8/redis:alpine
    command: redis-server --save 60 1 --requirepass MDNcVb924a --loglevel warning 
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - backend




  redis-commander:
    container_name: redis-commander
    hostname: redis-commander
    image: rediscommander/redis-commander:latest
    restart: always
    environment:
      - REDIS_HOSTS=redis:127.0.0.1:6379 -p 8081:8081 
      - HTTP_USER=root
      - HTTP_PASSWORD=qwerty
    ports:
      - "8081:8081"
    networks:
      - backend
    depends_on:
      - redis



  adminer:
    image: adminer
    restart: always
    ports:
      - 8080:8080
    container_name: adminer
    networks:
      - backend    




networks:
  backend:
    driver: bridge

volumes:
    postgres:
    pgadmin:
    redis-data:
